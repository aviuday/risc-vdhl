library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity ALU is
port( alu_a : in std_logic_vector(15 downto 0);
      alu_b : in std_logic_vector(15 downto 0);
		ctrl : in std_logic_vector(1 downto 0);
		alu_out : out std_logic_vector(15 downto 0);
		c_out : out std_logic_vector(15 downto 0);
		z_out : out std_logic_vector(15 downto 0) );
end entity ALU;

architecture operation of ALU is


begin

process(alu_a,alu_b,ctrl)

variable sum_temp: std_logic_vector(16 downto 0);

begin

 if ctrl = "00" then
	sum_temp <= (alu_a + alu_b);
	c_out <= sum_temp(16);
	alu_out <= sum_temp(15 downto 0);
	if (alu_a = "0000000000000000" and alu_b = "0000000000000000") then
		z_out(0) <= '1';
		z_out(15 downto 1) <= (others => '0');
	else
		z_out <= "0000000000000000";
	end if;

 elsif ctrl = "01" then
	alu_out <= (alu_a nand alu_b);
	if ( alu_a nand alu_b = "0000000000000000" ) then
		z_out(0) <= '1';
		z_out(15 downto 1) <= (others => '0');
	else
		z_out <= "0000000000000000";
	end if;
	c_out <= "0000000000000000";

 else  
 	alu_out <= (alu_a xor alu_b);
 	if ( alu_a xor alu_b = "0000000000000000" ) then
		z_out(0) <= '1';
		z_out(15 downto 1) <= (others => '0');
	else
		z_out <= "0000000000000000";
	end if;
 	c_out <= "0000000000000000";

 end if;

end process;

end architecture;